#!/usr/bin/env python

# Copyright 2013: Emmanouil Kiagias <e.kiagias@gmail.com>
# License: GPL

"""
This script generates the control file used by the Blend task package.
"""

import os
import sys
import argparse
import psycopg2
import logging
import pprint
import subprocess

#### UDD ####
UDDPORT=5452
DEFAULTPORT=5432

class UDD_connector:
    """
    This class connects with UDD and provides methods to query Blends' information
    """
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.connection = self.__get_db_connection()
        self.cursor = self.connection.cursor()

    def __get_db_connection(self):
        """
        Connects to UDD and return a cursor instance
        """
        ##TODO add additional connections in case of error (like different port)
        self.logger.debug("Trying to connect to UDD")
        try:
            conn = psycopg2.connect(host="localhost",port=UDDPORT,user="guest",database="udd")
        except psycopg2.OperationalError, err:
            try:
                conn = psycopg2.connect(host="udd.debian.org",port=UDDPORT,user="guest",database="udd")
            except psycopg2.OperationalError, err:
                self.logger.error("UDD connection error: {0}").format(err)
                sys.exit(-1)


        return conn

    def finish():
        """
        This method finalizes the db connection and the connected class' cursor
        """
        #FIXME add proper try catch
        self.cursor.close()
        self.connection.close()

    def __execute_query(self, query):
        """
        This function executes the given query and checks 
        if any error/exception occurs during the execution.
        """
        self.logger.debug("Executing query:\n{0}\n".format(query))

        try:
            self.cursor.execute(query)
        except psycopg2.ProgrammingError, err:
            self.logger.error("Problem with query\n{0}\n{1}".format(query, err))
            sys.exit(-1)
        except psycopg2.DataError, err:
            self.logger.error("{0}; query was\n{1}".format(err, query))
            sys.exit(-1)


    def get_available_releases(self):
        """
        It queries UDD and returns a list with with all the available releases(stable, testing etc)
        (for the moment is used for just checking the command line arguments, this function may be removed later)
        """
        query = "select distinct role from releases"

        self.__execute_query(query)

        #just check if any of the rows retured is empty
        return [ release[0] for release in self.cursor.fetchall() if release[0] ]

    def __get_available_architectures(self):
        """
        It queries the UDD and returns a list with all the available Debian architectures
        """
        query = "select distinct architecture from packages where architecture != 'all'"

        self.__execute_query(query)

        #just check if any of the rows retured is empty
        return [ arch[0] for arch in self.cursor.fetchall() if arch[0] ]

    def get_blend_info(self, blend):
        """
        Return a dictionary containing the given's blend info (title, description, vcs, taskprefix etc)
        """
        self.logger.debug("get_blend_info function was called")

        blend_info = {}    
        query="""
            SELECT * FROM blends_metadata WHERE blend='{0}'
            """.format(blend)

        self.__execute_query(query)

        #get the blend info from the cursor
        info = self.cursor.fetchone()

        ##TODO write a proper handling of invalid arguments(not existing blends, architecture etc)
        if not info:
            self.logger.error("Blend: {0} not found, aborting".format(blend))
            sys.exit(-1)

        #column name: 0 index of each desc list element
        desc = self.cursor.description

        for i, column in enumerate(desc):
            blend_info[column[0]] = info[i]

        return blend_info

    def __get_tasks_info(self, **kwargs):
        """
        Return a dictionary containing the tasks' info(title, description, section, priority etc) for the given blend
        """
        self.logger.debug("__get_task_info function was called")

        blendname = kwargs["blend"]
        tasksprefix = kwargs["tasksprefix"]
        release = kwargs["release"]

        blends_dependencies = {}

        query="""
            SELECT task, description, section as "Section", enhances as "Enhances", leaf as "Leaf",
                  metapackage, test_always_lang, long_description
                FROM blends_tasks
            WHERE blend='{0}'
            """.format(blendname)

        self.__execute_query(query)

        desc = self.cursor.description

        #loop over each result in cursor's results set
        result = self.cursor.fetchone()

        while not result is None:
            #result row indexes: task(0), title(1), metapackage(2), description(3), long_description(4)
            task = result[0]

            blends_dependencies[task] = {}
            blends_dependencies[task]['haspackages'] = 0

            self.logger.debug("Reading info about task: {0}".format(task))

            #we want desc[1:] we dont want the 0 index which contains the task name
            #column[0] contains the column name(taken from cursor description)
            for i, column in enumerate(desc[1:]):
                #results[i+1] cause we start from index 1 (desc[1:]) and not from 0
                blends_dependencies[task][column[0]] = result[i+1]

            #the proposed priority is extra for all Blends
            blends_dependencies[task]["Priority"] = "extra"

            #also initialize empty lists for the following keys:
            for key in ["Depends", "Recommends", "Suggests", "Ignores", "Avoid"]:
                blends_dependencies[task][key] = []
            
            result = self.cursor.fetchone()
            
        return blends_dependencies


    #TODO, this method will be used to implement my idea about blend_dependencies
    def __get_blend_alternatives(self, **kwargs):
        """
        It returns a dictionary containing the alternatives packages per task of a Blend
        """
        self.logger.debug("get_blend_alternatives function was called")

        blendname = kwargs["blend"]
        wanted_dependencies = kwargs["wanted_dependencies"]
        blend_alternatives = {}
        single_alternatives = {}

        query="""
            SELECT  task, dependency, alternatives FROM blends_dependencies_alternatives
              WHERE blend='{0}' and alternatives like '%|%'
            """.format(blendname)

        self.__execute_query(query)

        #indexes of row: task(0), alternatives(1), dependency(2)
        row = self.cursor.fetchone()

        while not row is None:
            task, dependency, alternatives = row

            if not task in blend_alternatives:
                blend_alternatives[task] = {}
                for header in [ "Depends", "Suggests", "Recommends", "Avoid", "Ignores"]:
                    blend_alternatives[task][header] = []

            if dependency == 'd':
                blend_alternatives[task]["Depends"].append(alternatives)
            if dependency == 'r':
                blend_alternatives[task]["Recommends"].append(alternatives)
            if dependency == 'i':
                blend_alternatives[task]["Ignores"].append(alternatives)
            if dependency == 's':
                blend_alternatives[task]["Suggests"].append(alternatives)
            if dependency == 'a':
                blend_alternatives[task]["Avoid"].append(alternatives)

            if dependency in wanted_dependencies:
                if not task in single_alternatives:
                    single_alternatives[task] = []
                single_alternatives[task] += [ x.strip() for x in alternatives.split('|') ] 

            row = self.cursor.fetchone()

        #TODO, comment out this debug message
        self.logger.debug("Dumping out  the collected alternatives")
        self.logger.debug(blend_alternatives)

        return blend_alternatives, single_alternatives


    def __resolve_alternatives(self, **kwargs):
        """
        This method will convert single packages according to the alternatives.
        For example the following lists: package_list = [ 'k3b', 'brasero' ,  'k3b-i18n'] 
        and alternatives = [ 'k3b | brasero' ,  'k3b-i18n | brasero' ], and return this ['k3b | brasero', 'k3b-i18n | brasero']
        """
        package_list_archs = kwargs["package_list"]
        package_list = {}
        for pkg_temp in package_list_archs:
            if ' ' in pkg_temp:
                splitted = pkg_temp.split(' ')
                p = splitted[0].strip()
                
                archs = ' '.join(splitted[1:])
                package_list[p] = ' ' + archs
            else:
                package_list[pkg_temp] = ''

        alternatives = kwargs["alternatives"]
        dependency = kwargs["dependency"]
        wanted_dependencies = kwargs["wanted_dependencies"]
        virtual_packages = kwargs["virtual_packages"]

        excluded = []
        seen = []
        resolved_list = []
        for alter in alternatives:
            #strip the spaces from the beginning and the end of the str packages
            temp_alters = [ al.strip() for al in alter.split('|') ]
            alt_exists = []
            for alt in temp_alters:
                if alt in package_list:
                    seen.append(alt)
                    alt_exists.append(alt)
            
            if alt_exists:
                if dependency in wanted_dependencies:
                    real_temp = []
                    for pkg in alt_exists:
                        if not pkg in virtual_packages:
                            real_temp.append(pkg)

                    if real_temp:
                        if len(real_temp) == len(alt_exists):
                            fixed_alts = []
                            for a in alt_exists:
                                fixed_alts.append(a + package_list[a])

                            resolved_list.append(' | '.join(fixed_alts))
                        else:
                            virtual_temp = list ( set(alt_exists) - set(real_temp) )
                            fixed_alts = []
                            for a in real_temp + virtual_temp:
                                fixed_alts.append(a + package_list[a]) 

                            resolved_list.append(' | '.join( fixed_alts ))
                    else:
                        excluded += alt_exists
                else:
                    fixed_alts = []
                    for a in alt_exists:
                        fixed_alts.append(a + package_list[a]) 

                    resolved_list.append(' | '.join(fixed_alts))
        
        for package in package_list:
            if not package in seen:
                resolved_list.append(package + package_list[package])

        return resolved_list, excluded

    def __resolve_architectures(self, exist_in_architectures, architectures):
        """
        return [ !arch1 !arch2 !arch3 ] as a string for the architecture differences between the given architectures list
        """

        if len(exist_in_architectures) == 1 and exist_in_architectures[0] == "all":
            return ''

        missing_archs = set(architectures) - set(exist_in_architectures)

        if missing_archs:
            excluded = []
            for missing in missing_archs:
                excluded.append('!' + missing)

            return ' [' + ' '.join(excluded) + ']'
        else:
            return ''

    def __build_all_architectures_query(self, blend, release, architectures):
        """
        Builds up a query to check each blends_dependency for each available
        Debian architecture
        """

        select_clause = """
           SELECT b.task, b.package, b.dependency, b.distribution, b.component, b.provides
           """

        from_clause = """
            FROM blends_dependencies b
            """

        where_clause = """
        WHERE b.blend='{0}'
        """.format(blend)


        for arch in architectures:
            select_clause += ", pkg_{0}.architecture".format(arch.replace('-',''))

            from_clause += """
                LEFT OUTER JOIN ( 
                 SELECT p.package, p.architecture 
                   FROM packages p JOIN releases r ON p.release = r.release 
                   WHERE r.role='{0}' and architecture='{1}') pkg_{2} ON b.package = pkg_{2}.package
            """.format(release, arch, arch.replace('-',''))

        return select_clause + from_clause + where_clause

    def __get_available_virtuals(self, virtual_packages, release, architectures):
        formatted_architectures = [ "'{0}'".format(arch) for arch in architectures ]

        available_virtual = {}

        query = """
            SELECT distinct p.provides, p.architecture FROM packages p JOIN releases r ON p.release = r.release
            WHERE r.role='{0}' AND p.distribution='debian' AND component='main' AND p.architecture in ( {1} )
              AND provides ~ ('((\s|,)'||'({2})'||'(\s+|,|$)|^'||'({2})'||'$)')
            """.format(release, ','.join(formatted_architectures), '|'.join(virtual_packages))

        self.__execute_query(query)
        row = self.cursor.fetchone()
        while not row is None:
            #row[0] : p.provides column
            myprovides = [ x.strip() for x in row[0].split(',') ]
            myarch = row[1]
            for p in myprovides:
                if not p in available_virtual:
                    available_virtual[p] = []

            available_virtual[p].append(myarch)

            row = self.cursor.fetchone()

        return available_virtual

    def get_blend_dependecies(self, **kwargs):
        """
        Using the given arguments queries UDD and returns a dictionary containing
        all the blends' tasks dependencies
        """
        self.logger.debug("get_blend_dependecies function was called.")

        blend = kwargs["blend"]
        release = kwargs["release"]
        nodepends = kwargs["nodepends"]
        taskdescription = kwargs['taskdescription']

        #initialize the tasks' info before getting the dependencies for the tasks
        blend_dependencies = self.__get_tasks_info(blend = blend, release = release, tasksprefix = kwargs["tasksprefix"])
        virtual_packages = {}
        single_virtual_packages = []
        available = []
        missing = []
        excluded = []

        architectures = self.__get_available_architectures()

        query = self.__build_all_architectures_query(blend, release, architectures + ["all"])

        self.__execute_query(query)

        wanted_dependencies = []
        if nodepends or taskdescription:
            #in this case we need both depends and recommends
            wanted_dependencies += ['d', 'r']        
        else:
            #in this case we only need depends
            wanted_dependencies.append('d')
        
        #indexes of row: task(0), package(1), dependency(2), distribution(3), component(4), provides(5)
        #rest of the indexes are architectures
        row = self.cursor.fetchone()

        while not row is None:
            increase_packages = True
            #task, package, dependency, distribution, component, arch, provides = (row[0], row[1], row[2], row[3], row[4], row[5], row[6])
            task, package, dependency, distribution, component, provides = row[:6]
            exist_in_archs = [ x for x in row[6:] if x ]

            ##TODO check again, do not include at all virtual packages when it comes to the tasksel template file
            if provides and not taskdescription:
                if dependency in wanted_dependencies:
                    if not task in virtual_packages:
                            virtual_packages[task] = []

                    virtual_packages[task].append(package)
                    single_virtual_packages.append(package)

                    row = self.cursor.fetchone()
                    continue

            #TODO check again if: if else is with proper syntax
            if nodepends or taskdescription:
                #in this case all the Depends go to Recommends and the recommend packages
                #follow the same rules as the depends packages
                #dependency 'd'== depends and 'r' == recommends
                if dependency == 'd' or dependency == 'r':
                    if distribution == 'debian' and component == 'main':
                        if exist_in_archs:
                            archs_resolved = self.__resolve_architectures(exist_in_archs, architectures)
                            blend_dependencies[task]["Recommends"].append(package + archs_resolved)
                    else:
                        blend_dependencies[task]["Suggests"].append(package)
            else:
                if dependency == 'd':
                    if distribution == 'debian' and component == 'main':
                        if exist_in_archs:
                            blend_dependencies[task]["Depends"].append(package + archs_resolved)
                    else:
                        blend_dependencies[task]["Suggests"].append(package)
                elif dependency == 'r':
                    blend_dependencies[task]["Recommends"].append(package)

            if dependency == 's':
                blend_dependencies[task]["Suggests"].append(package)
            if dependency == 'i':
                blend_dependencies[task]["Ignores"].append(package)
                #missing.append(package)
                increase_packages = False
            if dependency == 'a':
                blend_dependencies[task]["Avoid"].append(package)
                excluded.append(package)
                increase_packages = False

            #TODO check again which packages should be kept
            #not sure if i should add these packages into the missing
            #if not distribution == 'debian' or not component == 'main' or not exist_in_archs:
            #    missing.append(package)
            #else:
            #    available.append(package)

            if increase_packages:
               blend_dependencies[task]["haspackages"] += 1 

            row = self.cursor.fetchone()


        #once we have all the dependencies we will get the alternatives
        blend_alternatives, single_alternatives = self.__get_blend_alternatives(blend = blend, wanted_dependencies = wanted_dependencies)

        #now we should handle the virtual packages if any:
        if single_virtual_packages:
            
            available_virtual = self.__get_available_virtuals(single_virtual_packages, release, architectures + ["all"])

            for task in virtual_packages:
                exist = []
                miss = []
                for pkg in virtual_packages[task]:

                    existsInAlternatives = False

                    if pkg in available_virtual:
                        if task in single_alternatives:
                            if pkg in single_alternatives[task]:
                                existsInAlternatives = True

                    if existsInAlternatives:
                        archs_resolved = self.__resolve_architectures(available_virtual[pkg], architectures)
                        if nodepends or taskdescription:
                            blend_dependencies[task]["Recommends"].append(pkg+archs_resolved)
                        else:
                            blend_dependencies[task]["Depends"].append(pkg+archs_resolved)
                    else:
                        blend_dependencies[task]["Suggests"].append(pkg)

        if blend_alternatives:
            #and now we will resolve the alternatives in the single dependencies for each header
            for task in blend_dependencies:
                if not task in blend_alternatives:
                    continue

                if nodepends or taskdescription:
                    temp_depends = blend_alternatives[task]["Depends"]
                    temp_recommends = blend_alternatives[task]["Recommends"]
                    blend_alternatives[task]["Recommends"] = temp_depends + temp_recommends
                
                for header in [ "Depends", "Recommends", "Suggests", "Ignores", "Avoid" ]:
                    package_list = blend_dependencies[task][header]
                    alternatives = blend_alternatives[task][header]

                    if header == "Suggests":
                        if nodepends or taskdescription:
                            alternatives += blend_alternatives[task]["Recommends"]
                        else:
                            alternatives += blend_alternatives[task]["Depends"]

                    if alternatives:
                        #change previous package list with the alternatives resolved package list
                        resolved, movetosuggest = self.__resolve_alternatives(package_list = package_list, 
                            alternatives = alternatives, dependency = header[0].lower(), 
                            wanted_dependencies = wanted_dependencies, virtual_packages = single_virtual_packages)

                        blend_dependencies[task][header] = resolved

                        if header[0].lower() in wanted_dependencies:
                            blend_dependencies[task]["Suggests"] += movetosuggest

        #return the depenencies with the corrensponding architecture
        return (blend_dependencies,available, missing, excluded)


def gen_control(**kwargs):
    """
    This method generates the blend's control file using the dataDict which contains 
    the blends' info along with all the blends dependencies
    """
    logger = logging.getLogger(__name__)
    logger.debug("gen_control method was called")

    #get the data we need from kwargs
    hasconfig = kwargs["hasconfig"]
    suppressempty = kwargs["suppressempty"]
    nodepends = kwargs["nodepends"]
    tasksprefix = kwargs["blend_info"]["tasksprefix"]
    blend_dependencies = kwargs["blend_dependencies"]
    architecture = "any"

    #TODO this is used for testing for the moment, will be changed
    control_path = "control.temp"
    logger.debug("Opening file {0} to write".format(control_path))
    with open(control_path,'w') as fout:

        for task in sorted(blend_dependencies.keys()):
            
            if not blend_dependencies[task]["metapackage"]:
                continue

            logger.debug("{0}: {1}".format(task, blend_dependencies[task]["haspackages"]))

            #if no package was found in the target distribution suppress this task at all
            if suppressempty and blend_dependencies[task]["haspackages"] == 0:
                logger.debug("The metapackage {0} will not be created because {1} dependant are in the pool and suppressempty was set {2}".format(task, blend_dependencies[task]["haspackages"], suppressempty))
                continue

            fout.write("Package: {0}-{1}\n".format(tasksprefix, task))
            fout.write("Architecture: {0}\n".format(architecture))

            for header in ["Section", "Priority"]:
                if blend_dependencies[task][header]:
                    fout.write("{0}: {1}\n".format(header, blend_dependencies[task][header]))

            if nodepends:
                #Degrade dependencies to recommends
                fout.write("Depends: {0}-tasks (= ${{binary:Version}})".format(tasksprefix))

                if hasconfig:
                    fout.write(", {0}-config (= ${{binary:Version}})".format(tasksprefix))

                fout.write("\n")

                #TODO current blends-dev does a sort_uniq in case there are duplicates, also check if they exist
                fout.write("Recommends: {0}\n".format(",\n ".join(sorted(blend_dependencies[task]["Recommends"]))))

                if blend_dependencies[task]["Suggests"]:
                    fout.write("Suggests: {0}\n".format(",\n ".join(sorted(blend_dependencies[task]["Suggests"]))))

            else:
                for header in ["Depends", "Recommends", "Suggests"]:
                    if blend_dependencies[task][header]:
                        fout.write("{0}: {1}\n".format(header, ",\n ".join(sorted(blend_dependencies[task][header]))))

            fout.write("Description: {0}\n".format(blend_dependencies[task]["description"]))
            fout.write("{0}".format(blend_dependencies[task]["long_description"])) #Already contains a newline

            fout.write("\n")

def gen_task_desc(**kwargs):
    """
    This method generates the task description file for tasksel
    """
    logger = logging.getLogger(__name__)

    suppressempty = kwargs["suppressempty"]
    blend = kwargs["blend_info"]["blend"]
    tasksprefix = kwargs["blend_info"]["tasksprefix"]
    blend_dependencies = kwargs["blend_dependencies"]


    #TODO this is used for testing for the moment, will be changed
    task_desc_path = "taskdesc.template"
    logger.debug("Opening file {0} to write".format(task_desc_path))
    with open(task_desc_path,'w') as fout:

        for task in sorted(blend_dependencies.keys()):    

            if blend_dependencies[task]['Leaf'] == 'false':
                continue

            if suppressempty and blend_dependencies[task]["haspackages"] == 0:
                if blend_dependencies[task]['test_always_lang']:
                    logger.debug("Print empty task {0} because Test-always-lang is set\n".format(task))
                else:
                    logger.debug("The metapackage {2} will not be created because {0} dependant are in the pool and suppressempty was set {1}\n".format(blend_dependencies[task]["haspackages"], suppressempty, task))
                    continue

            fout.write("Task: {0}-{1}\n".format(tasksprefix, task))
            fout.write("Section: {0}\n".format(blend));
            fout.write("Description: {0}\n".format(blend_dependencies[task]["description"]))
            fout.write("{0}".format(blend_dependencies[task]["long_description"])) #Already contains a newline
            fout.write("Relevance: 10\n")

            if blend_dependencies[task]["Enhances"]:
                fout.write("Enhances: {0}\n".format(blend_dependencies[task]["Enhances"]))

            if blend_dependencies[task]["metapackage"]:
                #No use listing a metapackage as a key package, if no metapackage exist.
                fout.write("Key: \n");
                fout.write(" {0}-{1}\n".format(tasksprefix, task))

            fout.write("Packages: list\n ")
            for header in ["Depends", "Recommends"]:
                if not blend_dependencies[task][header]:
                    continue 
                fout.write("{0}".format("\n ".join(sorted(blend_dependencies[task][header]))))
                fout.write("\n")

            fout.write("\n")


def main():
    blend_dev_dir = "/usr/share/blends-dev/"
    default_release = "testing"

    parser = argparse.ArgumentParser(epilog="Example: ./blend-gen-control -b debian-med -a amd64 --debug")
    #TODO this argument is kept for local testing
    parser.add_argument("-b", "--blend", dest="blend", type=str,
                        help="Blend name")
    parser.add_argument("-r", "--release", dest="release", type=str, default=default_release,
                        help="Target release, eg: stable, testing etc, default is: testing")
    parser.add_argument("-D", dest="nodepends", action="store_true", default=False,
                        help="lower all Depends: to Recommends:")
    parser.add_argument("-S", dest="suppressempty", action="store_true", default=False,
                        help="suppress tasks without any recommended package")
    parser.add_argument("-c", dest="gencontrol", action="store_true", default=False,
                        help="Create new debian/control file.")
    parser.add_argument("-t", dest="taskdesc", action="store_true", default=False,
                        help="Print task descriptions and package list for task")

    parser.add_argument("-d", "--debug", dest="debug", action="store_true", default=False,
                        help="Print debug information")
    #parse the command line arguments
    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig()
    logger = logging.getLogger(__name__)
    #----------------------------end of argparse and setup logging--------------------------------------#

    if not args.blend:
        command = blend_dev_dir+"blend-get-names blendname"
        process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
        output = process.communicate()[0].strip()
        if process.returncode != 0:
            logger.error(output)
            logger.error("For testing you can provide the desired blend through -b argument")
            sys.exit(-1)
        else:
            blendname = output
    else:
        blendname = args.blend
    
    #at least a -c or -t argument must be provided
    if not args.gencontrol and not args.taskdesc:
        logger.error("Argument -c(generate control file) or -t(generate taskdescription file) is required.")
        sys.exit(-1)

    hasconfig = False
    config_file = "config/control"

    myudd = UDD_connector()


    #check if the arg release provided from the user is valid
    if not args.release  == default_release:
        if args.release not in myudd.get_available_releases():
            logger.error("Invalid release: {0}, aborting..".format(args.release))
            sys.exit(-1)

    #check if a config file exists
    if os.path.isfile(config_file):
        hasconfig = True

    release = args.release
    suppressempty = args.suppressempty
    nodepends = args.nodepends

    blend_info = myudd.get_blend_info(blendname)
   
    if args.gencontrol:
        #generate a control for each provided architecture
        
        #get all the blends dependencies etc
        blend_dependencies, available, missing, excluded = myudd.get_blend_dependecies(blend = blend_info["blend"], release = release, 
            tasksprefix = blend_info["tasksprefix"], nodepends = nodepends, taskdescription = False)
        
        gen_control(blend_info = blend_info, blend_dependencies = blend_dependencies,
            suppressempty = suppressempty, nodepends = nodepends, hasconfig = hasconfig)

    elif args.taskdesc:
        #we reuse the same code as above here BUT we need the blend_dependencies here without nodepends so we make sure we call it
        #with nodepends = False no matter the command line argument, no need to descrease depends to recommends in any way for task description
        blend_dependencies, available, missing, excluded = myudd.get_blend_dependecies(blend = blend_info["blend"], release = release, 
            tasksprefix = blend_info["tasksprefix"], nodepends = False, taskdescription = True)
        
        gen_task_desc(blend_info = blend_info, blend_dependencies = blend_dependencies,
            suppressempty = suppressempty)

    return 0

if __name__ == '__main__':
    main()